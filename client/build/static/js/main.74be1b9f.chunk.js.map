{"version":3,"sources":["Hooks/HttpRequest.js","Components/Header.js","Components/AddTxBtn.js","Components/AddForm.js","Components/Coin.js","Components/CoinList.js","Components/ToggleBtn.js","Components/SearchCoin.js","Components/Loader.js","Components/Search.js","App.js","reportWebVitals.js","index.js"],"names":["useAxios","useState","loading","data","error","apiCoins","setApiCoins","useEffect","axios","get","then","res","catch","Header","coins","total","length","map","coin","undefined","amount","current_price","className","style","color","Intl","NumberFormat","currency","format","AddTxBtn","setShowForm","showForm","onClick","AddForm","toggleForm","updateCoin","cost","setCost","setAmount","transition","useTransition","from","opacity","enter","leave","maxLengthCheck","input","target","value","maxLength","slice","displayWorth","e","preventDefault","alert","item","form","onSubmit","fontWeight","name","step","type","onInput","onChange","Coin","onDelete","totalValue","totalCost","profitOrLoss","ROI","price_change_percentage_24h","src","image","alt","height","width","title","id","CoinList","ToggleBtn","toggle","toggleSearch","SearchCoin","searchCoin","onAdd","symbol","toUpperCase","Loader","SearchBar","content","searchTerm","setSearchTerm","placeholder","filter","toLowerCase","includes","indexOf","App","setCoins","setToggleSearch","y","getLocalCoins","saveToLocal","localStorage","setItem","JSON","stringify","getItem","localCoins","parse","addCoin","newCoin","find","savedCoinList","i","j","updatePrice","div","Search","updatedCoin","filteredCoins","el","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAwCeA,EArCE,WACf,MAAgCC,mBAAS,CACvCC,SAAS,EACTC,KAAM,KACNC,OAAO,IAHT,mBAAOC,EAAP,KAAiBC,EAAjB,KAiCA,OA3BAC,qBAAU,WAERD,EAAY,CACVJ,SAAS,EACTC,KAAM,KACNC,OAAO,IAETI,IACGC,IACC,4HAEDC,MAAK,SAACC,GACLL,EAAY,CACVJ,SAAS,EACTC,KAAMQ,EAAIR,KACVC,OAAO,OAGVQ,OAAM,WACLN,EAAY,CACVJ,SAAS,EACTC,KAAM,KACNC,OAAO,SAGZ,IAEIC,G,eCNMQ,EA/BA,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACZC,EAAQ,EAgBZ,OAbMD,EAAME,OAAS,GACjBF,EAAMG,KAAI,SAACC,GACT,YAAoBC,IAAhBD,EAAKE,OACCL,GAAgBG,EAAKE,OAASF,EAAKG,cAEpC,QASb,sBAAKC,UAAU,SAAf,UACE,gDACA,oBAAIC,MAAO,CAAEC,MAAO,WAApB,SACG,IAAIC,KAAKC,aAAa,QAAS,CAC9BH,MAAO,WACPI,SAAU,QACTC,OAAOb,KAEZ,mBAAGO,UAAY,OAAf,uG,QCdSO,EAZE,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,SAC9B,OACE,qBACEC,QAAS,WACPF,GAAaC,IAFjB,SAKE,wBAAQT,UAAU,eAAlB,0BC2ESW,EA9EC,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,WAAYhB,EAAuB,EAAvBA,KAAMiB,EAAiB,EAAjBA,WAEnC,EAAwBlC,mBAASiB,EAAKG,eAAtC,mBAAOe,EAAP,KAAaC,EAAb,KACA,EAA4BpC,mBAAS,IAArC,mBAAOmB,EAAP,KAAekB,EAAf,KAEMC,EAAaC,wBAAcN,EAAY,CAC3CO,KAAM,CAAEC,QAAS,GACjBC,MAAO,CAAED,QAAS,GAClBE,MAAO,CAAEF,QAAS,KAIdG,EAAiB,SAACC,GAClBA,EAAMC,OAAOC,MAAMhC,OAAS8B,EAAMC,OAAOE,YAC3CH,EAAMC,OAAOC,MAAQF,EAAMC,OAAOC,MAAME,MAAM,EAAGJ,EAAMC,OAAOE,aAI5DE,EAAe,SAACC,GACpBA,EAAEC,kBAEGjB,GAAQhB,EACXkC,MAAM,mCAENpB,IAGAC,EAAW,CAAEjB,OAAMkB,OAAMhB,WAGzBiB,EAAQnB,EAAKG,eACbiB,EAAU,MAId,OAAOC,GACL,SAAChB,EAAOgC,GAAR,OACEA,GACE,qCACE,qBAAKjC,UAAU,YAAYU,QAASE,IACpC,eAAC,WAASsB,KAAV,CACEjC,MAAOA,EACPkC,SAAUN,EACV7B,UAAU,6BAHZ,UAKE,cAAC,IAAD,CAAeA,UAAU,gBAAgBU,QAASE,IAClD,mBAAGX,MAAO,CAAEmC,WAAY,QAAxB,SAAmCxC,EAAKyC,OACxC,mDACA,uBACEC,KAAK,MACLtC,UAAU,cACVuC,KAAK,SACLZ,UAAU,KACVD,MAAOZ,EACP0B,QAASjB,EACTkB,SAAU,SAACX,GACTf,EAAQe,EAAEL,OAAOC,UAGrB,mDACA,uBACE1B,UAAU,cACVuC,KAAK,SACLZ,UAAU,KACVD,MAAO5B,EACPwC,KAAK,MACLE,QAASjB,EACTkB,SAAU,SAACX,GACTd,EAAUc,EAAEL,OAAOC,UAGvB,uBAAOa,KAAK,SAASb,MAAM,WAAW1B,UAAU,yBCqC7C0C,EA3GF,SAAC,GAAoC,IAAlC9C,EAAiC,EAAjCA,KAAM+C,EAA2B,EAA3BA,SAAU9B,EAAiB,EAAjBA,WAC9B,EAAgClC,oBAAS,GAAzC,mBAAO8B,EAAP,KAAiBD,EAAjB,KAGIoC,EAAahD,EAAKG,cAAgBH,EAAKE,OACvC+C,EAAYjD,EAAKkB,KAAOlB,EAAKE,OAC7BgD,EAAeF,EAAaC,EAC5BE,EAAO,IAAMD,EAAgBD,EAG3BjC,GAFahB,EAAKoD,4BAEL,WACjBxC,GAAaC,KAGf,OACE,qCACE,qBACET,UAAU,iBACVU,QAAS,gBAEYb,IAAdD,EAAKkB,UAAuCjB,IAAhBD,EAAKE,QACpCc,KALN,SASE,sBAAKZ,UAAU,wBAAf,UAEE,qBACEiD,IAAKrD,EAAKsD,MACVC,IAAI,GACJlD,MAAO,CAAEmD,OAAQ,OAAQC,MAAO,UAElC,mBAAGrD,UAAY,UAAf,SAA0BJ,EAAKyC,OAE/B,sBAAKrC,UAAW,GAAhB,UACA,sBAAMA,UAAY,yBAAlB,2BACA,mBAAGsD,MAAM,UAAT,SACG,IAAInD,KAAKC,aAAa,QAAS,CAC9BH,MAAO,WACPI,SAAU,QACTC,OAAOV,EAAKG,yBAIDF,IAAdD,EAAKkB,UAAuCjB,IAAhBD,EAAKE,OACjC,sBAAKE,UAAU,cAAf,UACG,sBAAMA,UAAY,QAAlB,yBACD,4BACG,IAAIG,KAAKC,aAAa,QAAS,CAC9BH,MAAO,WACPI,SAAU,QACTC,OAAOsC,KAEZ,sBAAM5C,UAAY,QAAlB,wBACA,6BAAI,IAAIG,KAAKC,cAAeE,OAAOV,EAAKE,aAG1C,QAIcD,IAAdD,EAAKkB,UAAuCjB,IAAhBD,EAAKE,OACjC,sBACEE,UACE8C,EAAe,EACX,SACAA,EAAe,EACf,OACiB,IAAjBA,GAAsB,OAN9B,UASE,sBAAM9C,UAAY,QAAlB,2BACA,4BACG,IAAIG,KAAKC,aAAa,QAAS,CAC9BH,MAAO,WACPI,SAAU,QACTC,OAAOwC,KAEZ,sBAAM9C,UAAY,QAAlB,mCACA,+BAAI,IAAIG,KAAKC,cAAeE,OAAOyC,GAAnC,UAGF,QAIclD,IAAdD,EAAKkB,UAAuCjB,IAAhBD,EAAKE,OACjC,cAAC,EAAD,CAAUU,YAAaA,EAAaC,SAAUA,IAE9C,GAGF,cAAC,IAAD,CACET,UAAU,YACVU,QAAS,WACPiC,EAAS/C,EAAK2D,YAKrB9C,GACC,cAAC,EAAD,CAASI,WAAYA,EAAYjB,KAAMA,EAAMgB,WAAYA,QCvFlD4C,EAjBE,SAAC,GAAqC,IAAnChE,EAAkC,EAAlCA,MAAOmD,EAA2B,EAA3BA,SAAU9B,EAAiB,EAAjBA,WACnC,OACE,qBAAKb,UAAU,YAAf,SACGR,EAAMG,KAAI,SAACC,GACV,OACE,cAAC,EAAD,CACEiB,WAAYA,EACZjB,KAAMA,EAEN+C,SAAUA,GADL/C,EAAK2D,UCIPE,EAZG,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,aAC3B,OACE,qBAAK3D,UAAU,aAAaU,QAASgD,EAArC,SACGC,EACC,cAAC,IAAD,CAAK3D,UAAU,aAEf,cAAC,IAAD,CAAQA,UAAU,gBCkBX4D,EA1BI,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,WAAYH,EAAoB,EAApBA,OAAQI,EAAY,EAAZA,MACxC,OACE,sBACE9D,UAAU,mBACVU,QAAS,WACPoD,EAAMD,GACNH,KAJJ,UAOE,qBACET,IAAKY,EAAWX,MAChBC,IAAI,GACJlD,MAAO,CAAEmD,OAAQ,OAAQC,MAAO,UAElC,4BAAIQ,EAAWxB,OACf,4BAAIwB,EAAWE,OAAOC,gBACtB,4BACG,IAAI7D,KAAKC,aAAa,QAAS,CAC9BH,MAAO,WACPI,SAAU,QACTC,OAAOuD,EAAW9D,qBCddkE,EAJA,WACb,OAAO,qBAAKjE,UAAU,YCsDTkE,EArDG,SAAC,GAAiC,IAG9CC,EAHepF,EAA8B,EAA9BA,SAAU2E,EAAoB,EAApBA,OAAQI,EAAY,EAAZA,MACrC,EAAoCnF,mBAAS,IAA7C,mBAAOyF,EAAP,KAAmBC,EAAnB,KAiDA,OA7CItF,EAASF,OACXsF,EACE,sBAAKnE,UAAU,mBAAf,UACE,uBACEA,UAAU,aACVuC,KAAK,OACL+B,YAAY,cACZ7B,SAAU,SAACX,GACTuC,EAAcvC,EAAEL,OAAOC,UAG3B,qBAAK1B,UAAU,cAAf,SACGjB,EAASF,KACP0F,QAAO,SAAC7C,GACP,MAAmB,KAAf0C,GAGF1C,EAAMW,KAAKmC,cAAcC,SAASL,EAAWI,eAFtC9C,EAMA,QAGV/B,KAAI,SAACC,GAAD,OACH,cAAC,EAAD,CACEkE,MAAOA,EACPD,WAAYjE,EAEZ8D,OAAQA,GADH3E,EAASF,KAAK6F,QAAQ9E,aASrCb,EAASH,UACXuF,EAAU,cAAC,EAAD,KAGRpF,EAASD,QACXqF,EAAU,uFAGLA,GCmEMQ,MAjHf,WACE,MAA0BhG,mBAAS,IAAnC,mBAAOa,EAAP,KAAcoF,EAAd,KACA,EAAwCjG,oBAAS,GAAjD,mBAAOgF,EAAP,KAAqBkB,EAArB,KAEM5D,EAAaC,wBAAcyC,EAAc,CAC7CxC,KAAM,CAAE2D,EAAG,IAAK1D,QAAS,GACzBC,MAAO,CAAEyD,EAAG,GAAI1D,QAAS,GACzBE,MAAO,CAAEwD,EAAG,IAAK1D,QAAS,KAGxBrC,EAAWL,IAEfO,qBAAU,WACR8F,MACC,IAEH9F,qBAAU,WACR+F,EAAYxF,KACX,CAACA,IAGJ,IAAMwF,EAAc,SAAClD,GACnBmD,aAAaC,QAAQ,QAASC,KAAKC,UAAUtD,KAGzCiD,EAAgB,WACpB,GAAsC,OAAlCE,aAAaI,QAAQ,SACvBJ,aAAaC,QAAQ,QAASC,KAAKC,UAAU,SACxC,CACL,IAAIE,EAAaH,KAAKI,MAAMN,aAAaI,QAAQ,UACjDT,EAASU,KAKP5B,EAAS,WACbmB,GAAiBlB,IAIb6B,EAAU,SAACC,GAEXjG,EAAME,OAAS,GACjBF,EAAMkG,MAAK,SAAC9F,GAAD,OAAUA,EAAK2D,KAAOkC,EAAQlC,MACrCvB,MAAM,uBAGV4C,EAAS,GAAD,mBAAKpF,GAAL,CAAYiG,MAuCxB,OAjBoB,WAClB,GAAI1G,EAASF,MACuC,OAA9CsG,KAAKI,MAAMN,aAAaI,QAAQ,UAAoB,CAEtD,IADA,IAAIM,EAAgBR,KAAKI,MAAMN,aAAaI,QAAQ,UAC3CO,EAAI,EAAGA,EAAID,EAAcjG,OAAQkG,IACxC,IAAK,IAAIC,EAAI,EAAGA,EAAI9G,EAASF,KAAKa,OAAQmG,IACpC9G,EAASF,KAAKgH,GAAGtC,KAAOoC,EAAcC,GAAGrC,KAC3CoC,EAAcC,GAAG7F,cAAgBhB,EAASF,KAAKgH,GAAG9F,eAIxDiF,EAAYW,IAIlBG,GAGE,sBAAK9F,UAAU,cAAf,WAEI2D,GAAgB,cAAC,EAAD,CAAQnE,MAAOA,IAEhCyB,GACC,SAAChB,EAAOgC,GAAR,OACEA,GACE,cAAC,WAAS8D,IAAV,CAAc/F,UAAU,UAAUC,MAAOA,EAAzC,SACE,cAAC+F,EAAD,CAAQjH,SAAUA,EAAU+E,MAAO0B,EAAS9B,OAAQA,UAK1DC,GACA,cAAC,EAAD,CACE9C,WA7CW,SAACiB,GAClB,IAAIlC,EAAOkC,EAAElC,KACTkB,EAAOgB,EAAEhB,KACThB,EAASgC,EAAEhC,OACXmG,EAAW,2BAAQrG,GAAR,IAAckB,OAAMhB,WAE/BoG,EAAgB1G,EAAM+E,QAAO,SAAC4B,GAAD,OAAQA,EAAG5C,KAAOzB,EAAElC,KAAK2D,MAE1DqB,EAAS,GAAD,mBAAKsB,GAAL,CAAoBD,MAsCtBzG,MAAOA,EACPT,SAAUA,EACV4D,SArDW,SAACY,GAClBqB,EAASpF,EAAM+E,QAAO,SAAC3E,GAAD,OAAUA,EAAK2D,KAAOA,SAuD1C,cAAC,EAAD,CAAWG,OAAQA,EAAQC,aAAcA,QCxGhCyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlH,MAAK,YAAkD,IAA/CmH,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.74be1b9f.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst useAxios = () => {\n  const [apiCoins, setApiCoins] = useState({\n    loading: false,\n    data: null,\n    error: false,\n  });\n\n  useEffect(() => {\n    \n    setApiCoins({\n      loading: true,\n      data: null,\n      error: false,\n    });\n    axios\n      .get(\n        \"https://api.coingecko.com/api/v3/coins/markets?vs_currency=inr&order=market_cap_desc&per_page=250&page=1&sparkline=false\"\n      )\n      .then((res) => {\n        setApiCoins({\n          loading: false,\n          data: res.data,\n          error: false,\n        });\n      })\n      .catch(() => {\n        setApiCoins({\n          loading: false,\n          data: null,\n          error: true,\n        });\n      });\n  }, []);\n\n  return apiCoins;\n};\n\nexport default useAxios;\n","const Header = ({ coins }) => {\n  let total = 0;\n\n  const getTotal = () => {\n    if (coins.length > 0) {\n      coins.map((coin) => {\n        if (coin.amount !== undefined) {\n          return (total = total + coin.amount * coin.current_price);\n        } else {\n          return null;\n        }\n      });\n    }\n  };\n\n  getTotal();\n\n  return (\n    <div className=\"header\">\n      <p>Portfolio Worth</p>\n      <h1 style={{ color: \"#009E17\" }}>\n        {new Intl.NumberFormat(\"en-IN\", {\n          style: \"currency\",\n          currency: \"INR\",\n        }).format(total)}\n      </h1>\n      <p className = \"note\">Note: everything is stored Locally on your Local Storage Nothing is Stored in server.</p>\n    </div>\n  );\n};\n\nexport default Header;\n","const AddTxBtn = ({setShowForm, showForm}) => {\n  return (\n    <div\n      onClick={() => {\n        setShowForm(!showForm);\n      }}\n    >\n      <button className=\"add-txa-btnn\">Add coins</button>\n    </div>\n  );\n};\n\nexport default AddTxBtn;\n","import { useState } from \"react\";\nimport { BsXCircleFill } from \"react-icons/bs\";\nimport { useTransition, animated } from \"react-spring\";\n\nconst AddForm = ({ toggleForm, coin, updateCoin }) => {\n  // Set the cost of each coin and the amount bought of said coin.\n  const [cost, setCost] = useState(coin.current_price);\n  const [amount, setAmount] = useState(\"\");\n\n  const transition = useTransition(toggleForm, {\n    from: { opacity: 0 },\n    enter: { opacity: 1 },\n    leave: { opacity: 0 },\n  });\n\n  // Check max length on inputs\n  const maxLengthCheck = (input) => {\n    if (input.target.value.length > input.target.maxLength) {\n      input.target.value = input.target.value.slice(0, input.target.maxLength);\n    }\n  };\n\n  const displayWorth = (e) => {\n    e.preventDefault();\n\n    if (!cost | !amount) {\n      alert(\"You forgot to input something!\");\n    } else {\n      toggleForm();\n\n      // Adds cost and amount to coin.\n      updateCoin({ coin, cost, amount });\n\n      // Input values back to default\n      setCost(coin.current_price);\n      setAmount(\"\");\n    }\n  };\n\n  return transition(\n    (style, item) =>\n      item && (\n        <>\n          <div className=\"form-mask\" onClick={toggleForm}></div>\n          <animated.form\n            style={style}\n            onSubmit={displayWorth}\n            className=\"form-container containerzz\"\n          >\n            <BsXCircleFill className=\"exit-form-btn\" onClick={toggleForm} />\n            <p style={{ fontWeight: \"bold\" }}>{coin.name}</p>\n            <label>Cost per coin:</label>\n            <input\n              step=\"any\"\n              className=\"input-style\"\n              type=\"number\"\n              maxLength=\"10\"\n              value={cost}\n              onInput={maxLengthCheck}\n              onChange={(e) => {\n                setCost(e.target.value);\n              }}\n            />\n            <label>Amount bought:</label>\n            <input\n              className=\"input-style\"\n              type=\"number\"\n              maxLength=\"10\"\n              value={amount}\n              step=\"any\"\n              onInput={maxLengthCheck}\n              onChange={(e) => {\n                setAmount(e.target.value);\n              }}\n            />\n            <input type=\"submit\" value=\"Add coin\" className=\"submit-btn\" />\n          </animated.form>\n        </>\n      )\n  );\n};\n\nexport default AddForm;\n","import { useState } from \"react\";\nimport { BsFillTrashFill } from \"react-icons/bs\";\nimport AddTxBtn from \"./AddTxBtn\";\nimport AddForm from \"./AddForm\";\n\nconst Coin = ({ coin, onDelete, updateCoin }) => {\n  const [showForm, setShowForm] = useState(false);\n\n  // Accounting\n  let totalValue = coin.current_price * coin.amount;\n  let totalCost = coin.cost * coin.amount;\n  let profitOrLoss = totalValue - totalCost;\n  let ROI = (100 * profitOrLoss) / totalCost;\n  const priceChange =coin.price_change_percentage_24h;\n\n  const toggleForm = () => {\n    setShowForm(!showForm);\n  };\n\n  return (\n    <>\n      <div\n        className=\"coin-container\"\n        onClick={() => {\n          // Opens up AddForm again to edit coin amount and cost if needed.\n          if ((coin.cost !== undefined) | (coin.amount !== undefined)) {\n            toggleForm();\n          }\n        }}\n      >\n        <div className=\"coin font-weight-bold\">\n          \n          <img\n            src={coin.image}\n            alt=\"\"\n            style={{ height: \"30px\", width: \"30px\" }}\n          />\n          <p className = \"nothing\">{coin.name}</p>\n         \n          <div className =\"\">\n          <span className = \"price font-weight-bold\">Current Price</span>\n          <p title=\"Hooray!\"> \n            {new Intl.NumberFormat(\"en-IN\", {\n              style: \"currency\",\n              currency: \"INR\",\n            }).format(coin.current_price)}\n          </p>\n          </div>\n          {/* Current value of coins */}\n          {(coin.cost !== undefined) | (coin.amount !== undefined) ? (\n            <div className=\"total-value\">\n               <span className = \"price\">Total Value</span>\n              <p>\n                {new Intl.NumberFormat(\"en-IN\", {\n                  style: \"currency\",\n                  currency: \"INR\",\n                }).format(totalValue)}\n              </p>\n              <span className = \"price\">No of Coin</span>\n              <p>{new Intl.NumberFormat().format(coin.amount)}</p>\n            </div>\n          ) : (\n            \"\"\n          )}\n\n          {/* Profit or Loss */}\n          {(coin.cost !== undefined) | (coin.amount !== undefined) ? (\n            <div\n              className={\n                profitOrLoss > 0\n                  ? \"profit\"\n                  : profitOrLoss < 0\n                  ? \"loss\"\n                  : profitOrLoss === 0 && \"even\"\n              }\n            >\n              <span className = \"price\">Profit / Loss</span>\n              <p>\n                {new Intl.NumberFormat(\"en-IN\", {\n                  style: \"currency\",\n                  currency: \"INR\",\n                }).format(profitOrLoss)}\n              </p>\n              <span className = \"price\">Profit / Loss Percent</span> \n              <p>{new Intl.NumberFormat().format(ROI)}%</p>\n            </div>\n          ) : (\n            \"\"\n          )}\n\n          {/* Add coins button */}\n          {(coin.cost === undefined) & (coin.amount === undefined) ? (\n            <AddTxBtn setShowForm={setShowForm} showForm={showForm} />\n          ) : (\n            \"\"\n          )}\n\n          <BsFillTrashFill\n            className=\"trash-btn\"\n            onClick={() => {\n              onDelete(coin.id);\n            }}\n          />\n        </div>\n      </div>\n      {showForm && (\n        <AddForm updateCoin={updateCoin} coin={coin} toggleForm={toggleForm} />\n      )}\n    </>\n  );\n};\n\nexport default Coin;","import Coin from \"./Coin\";\n\nconst CoinList = ({ coins, onDelete, updateCoin }) => {\n  return (\n    <div className=\"coin-list\">\n      {coins.map((coin) => {\n        return (\n          <Coin\n            updateCoin={updateCoin}\n            coin={coin}\n            key={coin.id}\n            onDelete={onDelete}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CoinList;\n","import { BsPlus, BsX } from \"react-icons/bs\";\n\nconst ToggleBtn = ({ toggle, toggleSearch }) => {\n  return (\n    <div className=\"toggle-btn\" onClick={toggle}>\n      {toggleSearch ? (\n        <BsX className=\"btn-sign\" />\n      ) : (\n        <BsPlus className=\"btn-sign\" />\n      )}\n    </div>\n  );\n};\n\nexport default ToggleBtn;\n","const SearchCoin = ({ searchCoin, toggle, onAdd }) => {\n  return (\n    <div\n      className=\"search-list-coin\"\n      onClick={() => {\n        onAdd(searchCoin);\n        toggle();\n      }}\n    >\n      <img\n        src={searchCoin.image}\n        alt=\"\"\n        style={{ height: \"30px\", width: \"30px\" }}\n      />\n      <p>{searchCoin.name}</p>\n      <p>{searchCoin.symbol.toUpperCase()}</p>\n      <p>\n        {new Intl.NumberFormat(\"en-IN\", {\n          style: \"currency\",\n          currency: \"INR\",\n        }).format(searchCoin.current_price)}\n      </p>\n    </div>\n  );\n};\n\nexport default SearchCoin;\n","import React from \"react\";\n\nconst Loader = () => {\n  return <div className=\"loader\"></div>;\n};\n\nexport default Loader;\n","import { useState } from \"react\";\nimport SearchCoin from \"./SearchCoin\";\nimport Loader from \"./Loader\";\n\nconst SearchBar = ({ apiCoins, toggle, onAdd }) => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  let content;\n\n  if (apiCoins.data) {\n    content = (\n      <div className=\"search-container\">\n        <input\n          className=\"search-bar\"\n          type=\"text\"\n          placeholder=\"Search coin\"\n          onChange={(e) => {\n            setSearchTerm(e.target.value);\n          }}\n        />\n        <div className=\"search-list\">\n          {apiCoins.data\n            .filter((value) => {\n              if (searchTerm === \"\") {\n                return value;\n              } else if (\n                value.name.toLowerCase().includes(searchTerm.toLowerCase())\n              ) {\n                return value;\n              } else {\n                return null;\n              }\n            })\n            .map((coin) => (\n              <SearchCoin\n                onAdd={onAdd}\n                searchCoin={coin}\n                key={apiCoins.data.indexOf(coin)}\n                toggle={toggle}\n              />\n            ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (apiCoins.loading) {\n    content = <Loader />;\n  }\n\n  if (apiCoins.error) {\n    content = <p>There was an error fetching the API. Try again later.</p>;\n  }\n\n  return content;\n};\n\nexport default SearchBar;\n","import { useState, useEffect } from \"react\";\nimport useAxios from \"./Hooks/HttpRequest\";\nimport { useTransition, animated } from \"react-spring\";\nimport Header from \"./Components/Header\";\nimport CoinList from \"./Components/CoinList\";\nimport ToggleBtn from \"./Components/ToggleBtn\";\nimport Search from \"./Components/Search\";\n\nfunction App() {\n  const [coins, setCoins] = useState([]);\n  const [toggleSearch, setToggleSearch] = useState(false);\n\n  const transition = useTransition(toggleSearch, {\n    from: { y: 800, opacity: 0 },\n    enter: { y: 50, opacity: 1 },\n    leave: { y: 800, opacity: 0 },\n  });\n\n  let apiCoins = useAxios();\n\n  useEffect(() => {\n    getLocalCoins();\n  }, []);\n\n  useEffect(() => {\n    saveToLocal(coins);\n  }, [coins]);\n\n  // Local storage functions\n  const saveToLocal = (e) => {\n    localStorage.setItem(\"coins\", JSON.stringify(e));\n  };\n\n  const getLocalCoins = () => {\n    if (localStorage.getItem(\"coins\") === null) {\n      localStorage.setItem(\"coins\", JSON.stringify([]));\n    } else {\n      let localCoins = JSON.parse(localStorage.getItem(\"coins\"));\n      setCoins(localCoins);\n    }\n  };\n\n  // Toggle search for coin.\n  const toggle = () => {\n    setToggleSearch(!toggleSearch);\n  };\n\n  // Add Coin\n  const addCoin = (newCoin) => {\n    // Check for duplicates before adding.\n    if (coins.length > 0) {\n      coins.find((coin) => coin.id === newCoin.id)\n        ? alert(\"Coin already added!\")\n        : setCoins([...coins, newCoin]);\n    } else {\n      setCoins([...coins, newCoin]);\n    }\n  };\n\n  // Delete coin\n  const deleteCoin = (id) => {\n    setCoins(coins.filter((coin) => coin.id !== id));\n  };\n\n  // Updates amount and cost of coin\n  const updateCoin = (e) => {\n    let coin = e.coin;\n    let cost = e.cost;\n    let amount = e.amount;\n    let updatedCoin = { ...coin, cost, amount };\n    // Delete the existing coin so we don't get duplicates.\n    let filteredCoins = coins.filter((el) => el.id !== e.coin.id);\n\n    setCoins([...filteredCoins, updatedCoin]);\n  };\n\n  // Updates coin price\n  const updatePrice = () => {\n    if (apiCoins.data) {\n      if (JSON.parse(localStorage.getItem(\"coins\")) !== null) {\n        let savedCoinList = JSON.parse(localStorage.getItem(\"coins\"));\n        for (let i = 0; i < savedCoinList.length; i++) {\n          for (let j = 0; j < apiCoins.data.length; j++) {\n            if (apiCoins.data[j].id === savedCoinList[i].id) {\n              savedCoinList[i].current_price = apiCoins.data[j].current_price;\n            }\n          }\n        }\n        saveToLocal(savedCoinList);\n      }\n    }\n  };\n  updatePrice();\n\n  return (\n    <div className=\"containerzz\">\n      \n      {!toggleSearch && <Header coins={coins} />}\n\n      {transition(\n        (style, item) =>\n          item && (\n            <animated.div className=\"ani-div\" style={style}>\n              <Search apiCoins={apiCoins} onAdd={addCoin} toggle={toggle} />\n            </animated.div>\n          )\n      )}\n\n      {!toggleSearch && (\n        <CoinList\n          updateCoin={updateCoin}\n          coins={coins}\n          apiCoins={apiCoins}\n          onDelete={deleteCoin}\n        />\n      )}\n      <ToggleBtn toggle={toggle} toggleSearch={toggleSearch} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}